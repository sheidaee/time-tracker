import React, { Component } from 'react';
import * as moment from "moment";
import "moment-timer";
import { Button } from "@blueprintjs/core";
import { connect } from "react-redux";

import DialogBox from "../../components/UI/DialogBox";
import BookTime from "../../components/BookTime";
import { classNames } from '../../../utilities';
import Styles from './Timer.module.scss';
import { timeOperations } from "../../../state/ducks/time";

const dialogProps = {
  btn: {
    className: "pt-intent-primary pt-large pt-icon-add",
    text: "Book"
  },
  dialog: {
    icon: "inbox",
    title: "Book Time"
  }
};

class Timer extends Component {
  state = {
    currentTimeHour: "00",
    currentTimeMinute: "00",
    currentTimeSecond: "00",
    currentTimeState: "am",
    counter: 0
  };

  /* updateTimeHandler = () => {
    this.setState((prevState, props) => {
      return { counter: prevState.counter + 1 };
    });
  }; */

  updateTimeHandler = () => {    
    this.props.onUpdateTime(this.props.counter);
  };
  

  componentDidMount() {
    new moment.duration(1000).timer(
      { start: true, loop: true },
      this.updateTimeHandler
    );         
  }

  componentWillReceiveProps(nextProps) {
    console.log(nextProps);
    
  }
  

  render() {    
    var timeCounter;
    timeCounter = moment()
      .hour(0)
      .minute(0)
      .second(this.props.counter)
      .format("HH : mm : ss");

    return <div className={Styles.Timer}>
        <div className={Styles.date}>02 April 08</div>
        <div className={Styles.timerDuration}>{timeCounter}</div>
        <DialogBox dialogProps={dialogProps}>
          <BookTime />
        </DialogBox>
        <Button 
          className={classNames('pt-intent-success pt-large pt-icon-pause', Styles.btn)}
          >
          Pause
        </Button>
        <Button className="pt-intent-danger pt-large pt-icon-refresh">
          Reset
        </Button>
      </div>;
  }
}

const mapStateToProps = state => ({
  counter: state.time.counter
});

const mapDispatchToProps = dispatch => {
  return {
    onUpdateTime: (counter) => dispatch(timeOperations.updateTime(counter))
  }
};

export default connect(mapStateToProps, mapDispatchToProps)(Timer);
